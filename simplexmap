#!/usr/bin/perl

use DBI;
use strict;
use QWizard;
use QWizard::API;
use strict;

my @aressigns = qw(K6JAC
		   K6KN
		   K6WLS
		   KE6GCV
		   KF6HHH
		   KG6FJL
		   KG6GNI
		   KG6SJT
		   KI4DTN
		   KI4DTO
		   KI6ATE
		   KI6BZR
		   KI6NQU
		   KI6NQW
		   N6KIX
		   N6KLB
		   W0EAX
		   W6KJX
		   W6VNQ
		   WA6TQJ
		   WB6ZEI);
my %done;

my %bands;
my @bands = qw(160M 80M 60M 40M 30M 20M 17M 15M 12M 10M 6M 2M 1.25M 70cm);
map { $bands{$_} = 1; } @bands;

my $dbh = DBI->connect("DBI:SQLite2:dbname=hammap");
my $dbh2 = DBI->connect("DBI:SQLite2:dbname=/home/hambot/hamsigns");

my $inspeople =  $dbh->prepare("insert into people (callsign, lat, lon) values(?,?,?)");
my $delpeople =  $dbh->prepare("delete from people where callsign = ?");
my $getperson = $dbh->prepare("select lat, lon from people where callsign = ? or callsign = ?");
my $insconnection = $dbh->prepare("insert into connections (listener, heard, band) values(?,?,?)");
my $getconnection = $dbh->prepare("select heard from connections where listener = ? and heard = ? and band = ?");
my $delconnection = $dbh->prepare("delete from connections where listener = ? and heard = ? and band = ?");
my $uniqsigns = $dbh->prepare("select distinct(heard) from connections");
$uniqsigns->execute();
map { push @aressigns, $_->[0] } @{$uniqsigns->fetchall_arrayref};
@aressigns = sort @aressigns;



my %primaries =
  ('first' =>
   { title => 'About you',
     introduction => "The purpose of this page is to allow a group of people (e.g. YoloARES) to collect data about who can hear who via simplex.  This is very useful informatino to have available when repeaters go down.  To use this, simply enter information about yourself (including geographical coordinates if you know them) and then click on the \"Enter New Connections\" button and selcet the callsigns you can hear (for example during a simplex net).  If you don't know your geographical coordinates, you'll be assigned a random location somewhere between Davis and Woodland.  To see the results of the collected information, use one of the other buttons further below.",
     questions =>
     [qw_text('callsign','Your Callsign:',
	      default => sub {
		  return uc(qwpref('callsign')) if (qwpref('callsign'));
		  return 'KI6NQW';
	      }
	     ),
      qw_hidden('no_confirm',1),
      "",
      qw_label("Location:", "(If you know it)"),
      "",
      qw_label("Today:", "Define connection information today for:"),
      { type => 'menu',
	name => 'band',
	text => "Band:",
	values => \@bands,
	indent => 1,
	default => '2M'},
      qw_button('enter','Add Data:','bogus','Enter New Connections'),
      "",
      { type => 'link',
	url => '/simplexmap.png',
	linktext => 'Simple Connection Diagram Plot',
      },
      { type => 'link',
	url => '/circlemap.png',
	linktext => 'Circular Connection Diagram Plot',
      },
      { type => 'link',
	url => '/yoloares.kml',
	linktext => 'Google Earth KML Export File',
      },
      { type => 'link',
	url => 'http://maps.google.com/maps?f=q&hl=en&geocode=&time=&date=&ttype=&q=http:%2F%2Fham.hardakers.net%2Fyoloares.kml&ie=UTF8&z=10&om=0',
	linktext => 'Open the KML file in a browser (Google Maps)',
      },
      { type => 'link',
	url => '/yoloares.csv',
	linktext => 'Comma Separated Value (CSV) List of Connections',
      },
    ],
     post_answers => sub {
	 foreach my $name (qw(callsign lat lon)) {
	     qwpref($name, uc(qwparam($name)));
	 }
	 if (qwparam('justmap')) {
	     $_[0]->add_todos('showmap');
	 } else {
	     $_[0]->add_todos('second');
	 }
     },
     actions => sub {
	 $delpeople->execute(uc(qwparam('callsign')));
	 $inspeople->execute(uc(qwparam('callsign')), qwparams(qw(lat lon)));
	 return 'MSG: Created entry for :' . qwparam('callsign');
     }
   },

   'second' =>
   { title => 'Who can you hear',
     questions =>
     [
      qw_label("About you:",""),
      qw_text('lat','Latitude:', indent => 1,
	      helpdesc => '(exmample formats: N38 42.123 or 38.98765)',
	      indent => 1,
	      default => sub {
		  my ($lat, $lon) = get_latlon(qwparam('callsign'));
		  return $lat if ($lat);
		  return 'N38 00.000';
	      }),
      qw_text('lon','Longitude:', indent => 1,
	      helpdesc => '(exmample formats: W121 43.123 or -121.98765)',
	      indent => 1,
	      default => sub {
		  my ($lat, $lon) = get_latlon(qwparam('callsign'));
		  return $lon if ($lon);
		  return 'W121 00.000';
	      }),
      qw_label("Callsigns:","Click on the Callsigns you can hear:"),
      qw_label("","(if you can copy a message from them, click otherwise don't)"),
      {type => 'table',
       indent => 1,
       values => sub {
	   my $row = [];
	   my @rows;
	   my $tc = -1;
	   return if (!exists($bands{qwparam('band')}));
	   for (my $i = 0; $i <= $#aressigns; $i++) {
	       next if ($done{$aressigns[$i]});
	       $done{$aressigns[$i]} = 1;
	       $tc++;
	       if ($tc > 0 && $tc % 5 == 0) {
		   push @rows, $row;
		   $row = [];
	       }
	       $getconnection->execute(qwparam('callsign'),
				       $aressigns[$i], qwparam('band'));
	       my $data = $getconnection->fetchrow_arrayref();
	       my $default = ($data && $data->[0] ne '') ? 1 : 0;
	       $getconnection->finish;
	       push @$row, qw_checkbox("heard_$aressigns[$i]", '', 1, 0,
				       button_label => $aressigns[$i],
				       default => $default);
	   }
	   push @rows, $row if ($#$row > -1);
	   return [\@rows];
       }},
      "",
      qw_label("Others:","Enter Other Callsigns you can hear:"),
      qw_text('other_1',"1:"),
      qw_text('other_2',"2:"),
      qw_text('other_3',"3:"),
      qw_text('other_4',"4:"),
      qw_text('other_5',"5:"),
      qw_text('other_6',"6:"),,
      "",
      qw_label("Need more?","You can hit Next and continue to restart and get more spaces"),
     ],
     actions =>
     sub {
	 my $count = 0;
	 return "illegal band" if (!exists($bands{qwparam('band')}));
	 for (my $i = 0; $i <= $#aressigns; $i++) {
	     if (qwparam("heard_$aressigns[$i]")) {
		 $delconnection->execute(uc(qwparam('callsign')),
					 $aressigns[$i], qwparam('band'));
		 $insconnection->execute(uc(qwparam('callsign')),
					 $aressigns[$i], qwparam('band'));
		 $count++;
	     } else {
		 $delconnection->execute(uc(qwparam('callsign')),
					 $aressigns[$i], qwparam('band'));
	     }
	 }

	 for (my $i = 0; $i <= 6; $i++) {
	     if (qwparam('other_' . $i)) {
		 $insconnection->execute(uc(qwparam('callsign')),
					 uc(qwparam('other_' . $i)),
					 qwparam('band'));
		 $count++;
	     }
	 }

	 return "MSG: marked reception for $count callsigns";
     }
   },

   'showmap' => 
   {
    title => "Current Map",
    questions =>
    [qw_label("","Connectivity Map (regenerated by hand on occasion)"),
     { type => 'image',
       image => '/simplexmap.png',},
     qw_label("","(This map is NOT geographically based.  Circle placement is based on the best position for diagramming"),
    ],
   }
  );

my $qw = new QWizard(primaries => \%primaries);
$qw->magic('first');


my %previous;
sub get_latlon {
    my $person = shift;

    my ($lat, $lon);
    $getperson->execute(lc($person), $person);
    my $prow = $getperson->fetchrow_arrayref();
    ($lat, $lon) = ($prow->[0], $prow->[1]) if ($prow);
    $getperson->finish();
    return ($lat, $lon);
}
