#!/usr/bin/perl

use strict;
use lib qw(../simplexmap);
use lib qw(../perl/share/perl/5.8.8);
use DBI;
use strict;
require QWizard;
import QWizard;
require QWizard::API;
import  QWizard::API;
require QWizard::Storage::File;
import  QWizard::Storage::File;
require SimplexMap;
import  SimplexMap;
use IO::String;
use Data::Dumper;

sub get_opts {
    my $opts =
      {
        d => 'simdb',
	H => 'hamsigns',
	g => 'geocoder.db',
      };
    return $opts;
};

my %done;

my $opts = get_opts();
#print Dumper($opts);

my %bands;
my @bands = qw(160M 80M 60M 40M 30M 20M 17M 15M 12M 10M 6M 2M 1.25M 70cm);
map { $bands{$_} = 1; } @bands;

my $dbh = DBI->connect("DBI:SQLite:dbname=$opts->{d}");
my $dbh2 = DBI->connect("DBI:SQLite:dbname=$opts->{H}");

my $inspeople =  $dbh->prepare("insert into people (id, callsign) select max(id)+1, ? from people");

my $getgroups = $dbh->prepare("select id, name from groups");
my $getgroup = $dbh->prepare("select id, name, password, adminpass from groups where id = ?");

my $getevents = $dbh->prepare("select eventid, eventname from events where eventgroup = ?");
my $getevent = $dbh->prepare("select eventid, eventname from events where eventgroup = ?");


my $getgrouppeople = $dbh->prepare("select callsign from people
                                 left join members on id = groupperson
                                 where groupid = ?");

my $getgrouppeoplesorted =
  $dbh->prepare("select callsign from people
              left join members on id = groupperson
                  where groupid = ?
               order by callsign");

my $getpersonid = $dbh->prepare("select id from people where callsign = ?");

# my $getperson = $dbh->prepare("select eventpersonlat, eventpersonlon
#                                  from eventmembers
#                             left join people on eventperson = id
#                                 where callsign = ?");
# my $insconnection = $dbh->prepare("insert into connections
#                                                (listener, heard, band)
#                                                values(?,?,?)");
# my $getconnection = $dbh->prepare("select heard from connections
#                                     where listener = ?
#                                       and heard = ?
#                                       and band = ?");
# my $delconnection = $dbh->prepare("delete from connections
#                                     where listener = ?
#                                       and heard = ?
#                                       and band = ?");

my $geteventperson = $dbh->prepare("select eventid, eventperson,
                                           eventpersonlocation,
                                           eventpersondetails
                                      from eventmembers
                                 left join people
                                        on id = eventperson
                                     where eventid = ?
                                       and callsign = ?");

my $deleventperson = $dbh->prepare("delete from eventmembers
                                     where eventid = ?
                                       and eventperson in
                                           (select id from people
                                            where callsign = ?)");

my $inseventperson = $dbh->prepare("insert into eventmembers
                                                (eventid, eventperson,
                                                 eventpersonlocation,
                                                 eventpersondetails)
                                       select ?, id, ?, ?
                                         from people
                                        where callsign = ?");

my $getlocations = $dbh->prepare("select locationid, locationname
                                    from locations
                               left join people on id = locationperson
                                   where callsign = ?");
my $getlocation  = $dbh->prepare("select locationname, locationtype,
                                         locationlat, locationlon,
                                         locationaddress,
                                         locationcity,
                                         locationstate,
                                         locationzip, locationid
                               from locations
                               left join people on id = locationperson
                                   where locationname = ?
                                     and callsign = ?");
my $getlocationbyid  = $dbh->prepare("select locationname, locationtype,
                                         locationlat, locationlon,
                                         locationaddress,
                                         locationcity,
                                         locationstate,
                                         locationzip, locationid
                               from locations
                               left join people on id = locationperson
                                   where locationid = ?
                                     and callsign = ?");
my $dellocation = $dbh->prepare("delete from locations
                                  where locationname = ?
                                    and locationperson in
                                        (select id from people
                                          where callsign = ?)");
my $inslocation = $dbh->prepare("insert into locations
                                        (locationid, locationperson,
                                         locationname, locationtype,
                                         locationlat, locationlon,
                                         locationaddress,
                                         locationcity,
                                         locationstate,
                                         locationzip)
                                 select  max(locationid)+1,
                                         ?, ?, ?, ?, ?, ?, ?, ?, ?
                                   from  locations");
my $updlocation = $dbh->prepare("update locations set
                                        locationtype = ?,
                                        locationlat = ?,
                                        locationlon = ?,
                                        locationaddress = ?,
                                        locationcity = ?,
                                        locationstate = ?,
                                        locationzip = ?
                                  where locationid = ?
                                    and locationperson = ?");

my ($calldetails, $hdh, $vdh);
if ($dbh2) {
    $calldetails = $dbh2->prepare("select first_name, street_address, city, state, zip_code, frn, applicant_type_code, unique_system_identifier from PUBACC_EN where unique_system_identifier = ?");
    $hdh = $dbh2->prepare("select license_status, grant_date, expired_date, unique_system_identifier from PUBACC_HD where call_sign = ? order by unique_system_identifier desc limit 1");
    $vdh = $dbh2->prepare("select unique_system_identifier from PUBACC_VC where callsign_requested = ? order by unique_system_identifier desc limit 1");
}

my %primaries =
  ('pickgroup' =>
   { title => 'Login',
     introduction => 'You must be a valid member of a group before you can continue',
     questions =>
     [
      { type => 'link',
	text => 'About:',
	linktext => 'Minimial documentation',
	url => 'http://ham.hardakers.net/simplexmap/',
      },
      "",
      get_menu('groupid','Group:',$getgroups,
	       sub { qwpref('groupid') }),
      { type => 'hidetext',
	name => 'grouppass',
	text => 'Group Password:',
	check_value => sub {
	    $getgroup->execute(qwparam('groupid'));
	    my $row = $getgroup->fetchrow_arrayref();
	    return "no such grouup" if (!$row);
	    return "Incorrect password"
	      if ($row->[2] ne qwparam('grouppass')
		  && $row->[3] ne qwparam('grouppass'));
	    return 'OK';
	},
	default => sub { qwpref('grouppass')},
      },
      "",
      qw_label("About You:"),
      qw_text('callsign','Your Callsign:',
	      indent => 1,
	      default => sub {
		  return uc(qwpref('callsign')) if (qwpref('callsign'));
	      },
	      check_value => \&qw_required_field,
	     ),
      qw_hidden('no_confirm',1),
     ],
     post_answers => sub {
	 $getgroup->execute(qwparam('groupid'));
	 my $row = $getgroup->fetchrow_arrayref();
	 if ($row->[2] eq qwparam('grouppass')) {
	     $_[0]->add_todos('aboutevent');
	 } elsif ($row->[3] eq qwparam('grouppass')) {
	     $_[0]->add_todos('groupadmin');
	 } else {
	     return;
	 }

	 qwpref('groupid',qwparam('groupid'));
	 qwpref('grouppass',qwparam('grouppass'));
     },
   },

   ########################################
   # EVENT INFORMATION
   #
   'aboutevent' =>
   { title => 'Event Information',
     introduction => 'Enter data about the event you are entering data for.  You may return at a future time to enter data about past events if you wish and collect the results.',
     questions =>
     [
      { type => 'dynamic',
	values => sub {
	    my $m = 
	      get_menu('eventid','Event Name:',$getevents, 
		       get_one_value_sql("select max(eventid) from events
                                           where eventgroup = ?",
					 qwparam('groupid')),
		       qwparam('groupid'));
	    $m->{'refresh_on_change'} = 1;
	    return $m;
	},
      },
      "",
      { type => 'dynamic',
	values => sub {
	    my $eventiddef = get_many($getevents, qwparam('groupid'));

	    my $locationid = qwparam('transmitloc');
	    my $locinfo;
	    my $eid;
	    my $eventperson;

	    if ($locationid =~ /^\d+$/) {
		$locinfo = get_one($getlocationbyid,
				   qwparam('transmitloc'),
				   qwparam('callsign'));
		$eid = qwparam('eventid');
		$eventperson =
		  get_one($geteventperson, $eid, qwparams(qw(callsign)));
	    } else {
		# if we have an event id, use it to do a lookup
		if (qwparam('eventid')) {
		    $eid = qwparam('eventid');
		} else {
		    # else assume maximum eventid, which is the default
		    # for the eventid.
		    $eid = get_one_value_sql("select max(eventid) from events
                                             where eventgroup = ?",
					     qwparam('groupid'));
		}

		$eventperson =
		  get_one($geteventperson, $eid, qwparam('callsign'));
		
		if ($eventperson) {
		    $locinfo = get_one($getlocationbyid,
				       $eventperson->[2],
				       qwparam('callsign'));
		} else {
		    # default to FCC data if all else fails
		    my $fcc = get_fcc_data(qwparam('callsign'));
		    $locinfo = ['','Address','','',
				$fcc->[1], $fcc->[2], $fcc->[3], $fcc->[4]];
		}
	    }

	    my $deflocinfo = "Power:      \nTranceiver: \nAntenna:    \n";
	    if (!$eventperson) {
		$eventperson = ['','','Home',$deflocinfo];
	    }

	    qwparam('transmitloc',$locinfo->[8]);
	    qwparam('xmittype',$locinfo->[1]) if (!qwparam('xmittype'));
	    qwparam('xmitlat',$locinfo->[2]);
	    qwparam('xmitlon',$locinfo->[3]);
	    qwparam('xmitaddr',$locinfo->[4]);
	    qwparam('xmitcity',$locinfo->[5]);
	    qwparam('xmitstate',$locinfo->[6]);
	    qwparam('xmitzip',$locinfo->[7]);
	    qwparam('xmitdetails',$eventperson->[3]);
	    return
	      [
	       {name => 'transmitloc',
		text => "Transmit Location:",
		refresh_on_change => 1,
		type => 'menu',
		labels => sub {
		    my $eventiddef = get_many($getevents, qwparam('groupid'));

		    my $rows = get_many($getlocations,
					qwparam('callsign'));
		    my @values;
		    my $havehome = 0;

		    foreach my $row (@$rows) {
			$havehome = 1 if ($row->[1] ne 'Home');
			push @values, @$row;
		    }
		    push @values, qw(Home Home) if (!$havehome);
		    push @values, 'Create New', 'Create New';
		    return \@values;
		},
		default => sub {
		    debug("def xmitloc: " . qwparam('transmitloc'));
		    return qwparam('transmitloc');
		},
		refresh_on_change => 1,
	       },
	       qw_text('xmitname','Location Name:',
		       doif => sub {qwparam('transmitloc') eq 'Create New'},
		       default => 'New Name',
		       indent => 1),
	       qw_menu('xmittype','Specify by:',[qw(Address Coordinates)],
		       default => $locinfo->[1], indent => 1,
		       refresh_on_change => 1),
	       { name => 'xmitaddr',
		 type => 'text',
		 text => 'Address:',
		 default => $locinfo->[4],
		 indent => 1,
		 doif => sub { qwparam('xmittype') eq 'Address' ||
				 qwparam('xmittype') eq '' },
	       },
	       { type => 'table',
		 indent => 1,
		 text => 'City/State/Zip:',
		 values => [[[qw_text('xmitcity','',default => $locinfo->[5]),
			      qw_text('xmitstate','',default => $locinfo->[6]),
			      qw_text('xmitzip','',default => $locinfo->[7]),
			     ]]],
		 doif => sub { qwparam('xmittype') eq 'Address' ||
				 qwparam('xmittype') eq '' },
	       },
	       { name => 'xmitlat',
		 type => 'text',
		 text => 'Latitude:',
		 helpdesc => '(EG: N38 32.123)',
		 default => sub { $locinfo->[2] || "N38 32.123"},
		 indent => 1,
		 doif => sub { qwparam('xmittype') eq 'Coordinates' },
	       },
	       { name => 'xmitlon',
		 type => 'text',
		 text => 'Longitude:',
		 helpdesc => '(EG: W121 43.123)',
		 default => sub { $locinfo->[3] || "W121 43.456"},
		 indent => 1,
		 doif => sub { qwparam('xmittype') eq 'Coordinates' },
	       },
	       "",
	       { type => 'textbox',
		 name => 'xmitdetails',
		 width => 80,
		 height => 5,
		 text => 'Transmitting Details:',
		 default => $eventperson->[3],
	       }
	      ],
	   }
      },
      "",
#       qw_label("Today:", "Define connection information today for:"),
#       { type => 'menu',
# 	name => 'band',
# 	text => "Band:",
# 	values => \@bands,
# 	indent => 1,
# 	default => '2M'},
      "",
      qw_button('enter','Event Data:','bogus','Enter New Connections'),
      qw_button('export','','bogus','Just Download The Results',
		helpdesc => '(download images, google earth kml, etc)'),
      "",
     ],
     post_answers => sub {
	 # save preferences
	 foreach my $name (qw(callsign transmitloc xmitlat xmitlon)) {
	     qwpref($name, qwparam($name));
	 }

	 # decide which button they pushed and go on; if export assume
	 # they didn't change anything.
	 if (qwparam('export')) {
	     $_[0]->add_todos('export');
	     return;
	 }

	 my $personidrow = get_one($getpersonid, qwparam('callsign'));

	 debug("starting in: " . qwparam('transmitloc') . "\n");

	 my $locationid;
	 # reset location named based on new-name for creation
	 if (qwparam('transmitloc') eq 'Create New' ||
	     qwparam('transmitloc') eq 'Home') {
	     qwparam('transmitloc', qwparam('xmitname'))
	       if (qwparam('transmitloc') eq 'Create New');
	     # simply a new one...

	     # make sure the name is unique
	     $dellocation->execute(qwparam('transmitloc'), qwparam('callsign'));

	     # make the new one
	     $inslocation->execute($personidrow->[0],
				   qwparams(qw(transmitloc xmittype
					       xmitlat xmitlon)),
				   qwparams('xmitaddr','xmitcity',
					    'xmitstate','xmitzip'));
	     my $locinfo = get_one($getlocation, qwparam('transmitloc'),
				   qwparam('callsign'));
	     $locationid = $locinfo->[8];
	 } else {
	     # just update the old
	     $updlocation->execute(qwparams(qw(xmittype xmitlat xmitlon
					       xmitaddr xmitcity xmitstate
					       xmitzip transmitloc)),
				   $personidrow->[0]);
	     $locationid = qwparam('transmitloc');
	 }

	 # delete the old event member and insert new
	 $deleventperson->execute(qwparams(qw(eventid callsign)));
# 	 print Dumper([qwparams(qw(eventid callsign)), $locationid,
# 		       qwparam('xmitdetails')]);
	 $inseventperson->execute(qwparam('eventid'), $locationid,
				  qwparams('xmitdetails', 'callsign'));


	 $_[0]->add_todos('second');
     },
   },

   ########################################
   # GROUP ADMIN
   #
   'groupadmin' =>
   { title => 'Group Administration',
     introduction => 'This screen is only shown to group administrators (IE, you entered the group administration password to get here).',
     questions =>
     [
      qw_button('addmembers','Group Administration:','bogus',
		'Bulk add New Group Members'),
      qw_button('addevent','','bogus',
		'Create a new event'),
      qw_button('entermydata','','bogus',
		'Enter my data for an event'),
      qw_button('export','','bogus',
 		'Download event result data'),
     ],
     post_answers =>
     sub {
	 if (qwparam('addmembers')) {
	     $_[0]->add_todos('addmembers');
	 } elsif (qwparam('addevent')) {
	     $_[0]->add_todos('addevent');
	 } elsif (qwparam('export')) {
	     $_[0]->add_todos('export');
	 } else {
	     $_[0]->add_todos('aboutevent');
	 }
     }
   },

   #########################################
   # ADD A NEW EVENT
   #
   'addevent' =>
   { title => 'Add A New Event',
     questions =>
     [qw_text('eventname','Name:', check_value => \&qw_required_field),
      qw_menu('eventband','Band:', \@bands, default => '2M'),
      qw_text('eventdate','Date:',helpdesc => '(optional)'),
      qw_text('eventtime','Time:',helpdesc => '(optional)'),
      qw_textbox('eventdescr','Event Description:',
		 width => 80,
		 height => 5),
     ],
     actions => 
     [
      sub {
	  my $newevent = $dbh->prepare("insert into events
                                            (eventid, eventgroup, eventname,
                                             eventband, eventdate, eventstart,
                                             eventdescription)
                                        select max(eventid)+1, ?, ?, ?, ?, ?, ?
                                          from events");
	  $newevent->execute(qwparams('groupid','eventname','eventband',
				      'eventdate','eventtime','eventdescr')),
	  return "MSG:New event created";
      }],
   },

   #########################################
   # ADD GROUP MEMBERS
   #
   'addmembers' =>
   { title => 'Add Group Members',
     introduction => 'To pre-populate the connection database with group members so every member does not need to hand type a lot of callsigns, enter callsigns here:',
     questions =>
     [qw_textbox('callsigns','Callsigns:', height => 40)
     ],
     actions => 
     [
      sub {
	  my @callsigns;
	  my $groupid = qwparam('groupid');
	  my $errcount = 0;
	  foreach my $callsign (split(/\s+/,qwparam('callsigns'))) {
	      if ($callsign =~ /^[a-zA-Z0-9]+$/) { # letters/numbers only
		  add_person_group($groupid, uc($callsign))
	      } else {
		  $errcount++;
	      }
	  };
	  return "Dropped $errcount illegal callsigns" if ($errcount);
	  return "OK";
      }],
   },

   ########################################
   # first screen
   #
   'first' =>
   { title => 'About you',
     introduction => "The purpose of this page is to allow a group of people to collect data about who can each other via simplex.  This is very useful informatino to have available on HF frequencies or when repeaters go down.  To use this, simply enter information about yourself (including geographical coordinates if you know them) and then click on the \"Enter New Connections\" button and selcet the callsigns you can hear (for example during a simplex net).  If you don't know your geographical coordinates, you'll be assigned a random location somewhere between Davis and Woodland.  To see the results of the collected information, use one of the other buttons further below.",
     questions =>
     [qw_text('callsign','Your Callsign:',
	      default => sub {
		  return uc(qwpref('callsign')) if (qwpref('callsign'));
	      }
	     ),
      qw_hidden('no_confirm',1),
      "",
      qw_label("Location:", "(If you know it)"),
      "",
      qw_label("Today:", "Define connection information today for:"),
      { type => 'menu',
	name => 'band',
	text => "Band:",
	values => \@bands,
	indent => 1,
	default => '2M'},
      qw_button('enter','Add Data:','bogus','Enter New Connections'),
      "",
      qw_button('export','Export:','bogus','Download The Results',
		helpdesc => '(download images, google earth kml, etc)'),
    ],
     post_answers => sub {
	 foreach my $name (qw(callsign lat lon)) {
	     qwpref($name, uc(qwparam($name)));
	 }
	 if (qwparam('export')) {
	     $_[0]->add_todos('export');
	 } else {
	     $_[0]->add_todos('second');
	 }
     },
     actions => sub {
#	 $delpeople->execute(uc(qwparam('callsign')));
	 $inspeople->execute(uc(qwparam('callsign')), qwparams(qw(lat lon)));
	 return 'MSG: Created entry for :' . qwparam('callsign');
     }
   },

   ########################################
   # EXPORT
   #
   'export' =>
   {
    title => "Export Results",
    questions =>
    [
     { type => 'dynamic',
       values => sub {
	   my $m = 
	     get_menu('eventid','Event Name:',$getevents,
		      get_one_value_sql("select max(eventid) from events
                                           where eventgroup = ?",
					qwparam('groupid')),
		      qwparam('groupid'));
	   return [$m,''];
       },
       doif => sub {qwparam('exportid') !~ /^\d+$/},
     },
     qw_button('dographviz','Diagrams:','dographviz','Show Bubble Diagram'),
     "",
     qw_label("Export:",""),
     qw_button('dokml','To Google Earth','dokml','KML', indent => 1),
     qw_button('docsv','To Comma-Separated-Value','docsv','CSV', indent => 1),
    ],
    post_answers => sub {
	if (qwparam('dokml')) {
	    $_[0]->add_todos('exportkml');
	}
	if (qwparam('docsv')) {
	    $_[0]->add_todos('exportcsv');
	}
	if (qwparam('dographviz')) {
	    $_[0]->add_todos('showgraphviz');
	}
    },
   },

########################################
# CSV
#
   'exportcsv' =>
   { title => 'CSV Download',
     questions => 
     [
     { type => 'filedownload',
       name => 'getitcsv',
       linktext => 'Download CSV File',
       extension => '.csv',
       text => 'To Connections CSV:',
       indent => 1,
       datafn => 
       sub {
	   my $opts = get_opts();
	   $opts->{'b'} = qwparam('eventid');
	   $opts->{'debug'} = 1;
	   init_simplexmap($opts);

	   my $str = new IO::String;
	   export_csv($str);
	   my $ref = $str->string_ref;
	   $_[0]->print($$ref);
	   chmod 0644, "tmp/$_[5]";
       }
     },
     ],
   },

########################################
# KML
#
   'exportkml' =>
   {
     title => "Export to KML",
     questions =>
     [
#       { type => 'radio',
# 	name => 'showlines',
# 	text => 'Connections to show:',
# 	labels => ['All',     	'All successful connections',
# 		   'HeardBy', 	'Just connections heard by...',
# 		   'SentFrom',  'Just connections sent from...',
# 		  ],
# 	default => 'All',
# 	refresh_on_change => 1,
#       },
#       qw_text("connectioncallsign", "Callsign:", indent => 1,
# 	      doif => sub { qwparam('showlines') eq 'HeardBy' ||
# 			      qwparam('showlines') eq 'SentFrom' }),
      { type => 'radio',
	name => 'groupby',
	text => 'Group connection lines:',
	default => 'From',
	labels => ['From','From the caller',
		   'To','From the listener',
		  ],
      },
      { type => 'table',
	name => 'Coloring',
	text => 'Coloring:',
	values => sub {
	    my @colors = qw(red green blue purple yellow marine);
	    my @menuitems;
	    foreach my $color (@colors) {
		push @menuitems, "#y$color", $color;
	    }
	    my (@rows, $row);
	    for (my $i = 0; $i <= 10; $i++) {
		$row = [qw_text("color_per_$i",""),
			{ type => 'menu',
			  name => "color_val_$i",
			  labels => \@menuitems,
			  default => '#yblue',
			}];
		push @rows, $row;
	    }
	    return [\@rows];
	}
      },
     ],
    post_answers => sub {
	$_[0]->add_todos('realexportkml');
    },
   },

   'realexportkml' =>
   {
    title => "The KML File Ready For Download",
    questions =>
    [
      { type => 'filedownload',
	name => 'getit',
	text => sub { print STDERR "mark1\n"; return 'Download'} ,
	linktext => 'Download KML File',
	extension => '.kml',
	datafn => 
	sub {
	    print STDERR "marker\n";
	    my $opts = get_opts();
	    $opts->{'b'} = qwparam('eventid');
	    $opts->{'showlines'} = qwparam('showlines');
	    $opts->{'connectioncallsign'} = qwparam('connectioncallsign');
	    $opts->{'groupby'} = qwparam('groupby');

	    for (my $i = 0; $i <= 10; $i++) {
		$opts->{'styles'}{uc(qwparam("color_per_$i"))} =
		  qwparam("color_val_$i")
		    if (qwparam("color_per_$i") ne '');
	    }
#	    print Dumper($opts);
	    init_simplexmap($opts);

	    my $str = new IO::String;
	    export_kml($str);
	    my $ref = $str->string_ref;
	    $_[0]->print($$ref);
	    qwparam('outputfile', $_[5]);
	}
      },
      { type => 'link',
	linktext => 'Open in Google Maps',
	url => sub {
#	    print STDERR "out: " . qwparam('outputfile') . "\n";
	    chmod 0644, "tmp/" . qwparam('outputfile');
	    return "http://maps.google.com/maps?f=q&hl=en&q=http:%2F%2Fsimplexmap.hamtools.org%2Ftmp%2F" . qwparam('outputfile');
	},
      },
    ]
   },

########################################
# GraphViz
#
   'showgraphviz' =>
   { title => "Connection Map",
     questions =>
     [{ type => 'image',
	imgdata => sub {
	    my $opts = get_opts();
	    $opts->{'b'} = qwparam('eventid');
	    $opts->{'l'} = 'dot';
	    init_simplexmap($opts);

	    my $str = new IO::String;
	    export_graphviz($str);
	    my $ref = $str->string_ref;
	    return [$$ref];
	}}],
   },

################################
# Collect Collection Information
#
   'second' =>
   { title => 'Who can you hear',
     questions =>
     [
#      qw_label("About you:",""),
#       qw_text('lat','Latitude:', indent => 1,
# 	      helpdesc => '(exmample formats: N38 42.123 or 38.98765)',
# 	      indent => 1,
# 	      default => sub {
# 		  my ($lat, $lon) = get_latlon(qwparam('callsign'));
# 		  return $lat if ($lat);
# 		  return 'N38 00.000';
# 	      }),
#       qw_text('lon','Longitude:', indent => 1,
# 	      helpdesc => '(exmample formats: W121 43.123 or -121.98765)',
# 	      indent => 1,
# 	      default => sub {
# 		  my ($lat, $lon) = get_latlon(qwparam('callsign'));
# 		  return $lon if ($lon);
# 		  return 'W121 00.000';
# 	      }),
      qw_paragraph("Event:",sub {
		       get_one_value_sql("select eventname from events
                                           where eventid = ?",
					 qwparam('eventid'));
		   }),
      qw_paragraph("You:",sub { qwparam('callsign') } , indent => 1),
      qw_paragraph("Description:",sub {
		       get_one_value_sql("select eventdescription from events
                                           where eventid = ?",
					 qwparam('eventid'));
		   }, indent => 1),
      qw_label("Date:",sub {
		       get_one_value_sql("select eventdate from events
                                           where eventid = ?",
					 qwparam('eventid'));
		   }, indent => 1),
      qw_label("Time:",sub {
		       get_one_value_sql("select eventstart from events
                                           where eventid = ?",
					 qwparam('eventid'));
		   }, indent => 1),
      qw_label("Band:",sub {
		       get_one_value_sql("select eventband from events
                                           where eventid = ?",
					 qwparam('eventid'));
		   }, indent => 1),
      "",
      qw_label("Callsigns:","Click on the Callsigns you can hear:"),
      qw_label("","(if you can copy a message from them, click otherwise don't)"),
      {type => 'table',
       indent => 1,
       values => sub {
	   my $checkboxes = [qw_label("Callsign:")];
	   my $peoplerows = [qw_label("First Name:")];
	   my $fivenine = [qw_label("Signal:")];
	   my @rows;
	   my $tc = 0;
	   my $columns = 6;
	   my $people = get_many($getgrouppeoplesorted, qwparam('groupid'));
	   for (my $i = 0; $i <= $#$people; $i++) {
	       next if ($done{$people->[$i][0]});
	       $done{$people->[$i][0]} = 1;
	       $tc++;
	       if ($tc > 0 && $tc % $columns == 0) {
		   push @rows, $checkboxes, $peoplerows, $fivenine,
		     [qw_label("------","")];
		   $checkboxes = [];
		   $fivenine = [];
		   $peoplerows = [];
	       }
	       my $yes = find_connection(qwparam('eventid'),
					 qwparam('callsign'),
					 $people->[$i][0]);
	       my $default = ($yes) ? 1 : 0;
	       push @$checkboxes,
		 qw_checkbox("heard_$people->[$i][0]", '', 1, 0,
			     button_label => $people->[$i][0],
			     default => $default);
 	       push @$fivenine, qw_text("fivenine_$people->[$i][0]", '',
 					default => ($yes ? $yes->[3] : '59'),
					size => 3);
	       my $fcc = get_fcc_data($people->[$i][0]);
	       push @$peoplerows, qw_label('',$fcc->[0] || "");
	   }
	   if ($#$checkboxes > -1) {
	       push @rows, $checkboxes;
	       push @rows, $peoplerows;
	       push @rows, $fivenine;
	   }
	   return [\@rows];
       }},
      "",
      qw_label("Others:","Enter Other Callsigns you can hear:"),
      { type => 'table',
	headers => [[qw(Number Callsign Signal)]],
	values => sub {
	    my $table;
	    for (my $i = 1; $i <= 10; $i++) {
		push @$table,
		  [
		   qw_label('',"$i"),
		   qw_text('other_' . $i),
		   qw_text('fivenine_' . $i,'',default => '59', size => 3),
		  ];
	    }
	    return [$table];
	}
      },
      "",
      qw_label("Need more?","You can hit Next and continue to restart and get more spaces"),
     ],
     actions =>
     sub {
	 my $count = 0;
	 my $people = get_many($getgrouppeople, qwparam('groupid'));
	 debug("starting with my callsign: " . qwparam('callsign'));
	 return if (qwparam('callsign') eq '');
	 debug("starting: $#$people\n");
	 for (my $i = 0; $i <= $#$people; $i++) {
	     if (qwparam("heard_$people->[$i][0]")) {
		 debug(" heard: $people->[$i][0]\n");
		 make_connection(qwparam('eventid'), qwparam('callsign'),
				 $people->[$i][0], "",
				 qwparam("fivenine_$people->[$i][0]"));
		 $count++;
	     } else {
		 debug("  nope: $people->[$i][0]\n");
		 delete_connection(qwparam('eventid'), qwparam('callsign'),
				   $people->[$i][0]);
	     }
	 }

	 for (my $i = 0; $i <= 6; $i++) {
	     if (qwparam('other_' . $i)) {
		 print "making connection: " . qwparam('callsign') . " -> " .
		   uc(qwparam('other_' . $i)) . "\n";
		 make_connection(qwparam('eventid'), qwparam('callsign'),
				 uc(qwparam('other_' . $i)), "",
				 qwparam('fivenine_' . $i));
		 $count++;
	     }
	 }

	 return "MSG: marked reception for $count callsigns";
     }
   },

   'showmap' => 
   {
    title => "Current Map",
    questions =>
    [qw_label("","Connectivity Map (regenerated by hand on occasion)"),
     { type => 'image',
       image => '/simplexmap.png',},
     qw_label("","(This map is NOT geographically based.  Circle placement is based on the best position for diagramming"),
    ],
   }
  );

my %previous;
# sub get_latlon {
#     my $person = shift;

#     my ($lat, $lon);
#     $getperson->execute($person);
#     my $prow = $getperson->fetchrow_arrayref();
#     ($lat, $lon) = ($prow->[0], $prow->[1]) if ($prow);
#     $getperson->finish();
#     return ($lat, $lon);
# }

sub get_menu {
    my $name = shift;
    my $text = shift;
    my $dbsth = shift;
    my $default = shift;
    my @rest = @_;

    my $max = 1;

    return
    { type => 'menu',
      name => $name,
      text => $text,
      labels => sub {
	  $dbsth->execute(@rest);
	  my @ret;
	  my $max = 1;
	  foreach my $row (@{$dbsth->fetchall_arrayref()}) {
	      push @ret, $row->[0], $row->[1];
	      $max = $row->[0] if ($row->[0] > $max);
	  }
	  qwparam('xxmax',$max);
	  return \@ret;
      },
      default => $default,
    };
}

########################################
# PERSON
my $find_person = $dbh->prepare("select id from people where callsign = ?");
my $make_person = $dbh->prepare("insert into people (id, callsign)
                                    select max(id)+1, ? from people");
sub maybe_create_person {
    my ($callsign, $eventid) = @_;
    debug("searching: $callsign $find_person $make_person\n");
    debug("       at: " . join(",",caller()) . "\n");
    my $person = get_one($find_person, $callsign);
    if (!$person) {
	$make_person->execute($callsign);
	$person = get_one($find_person, $callsign);
	add_person_event($eventid, $callsign);
	add_person_group(qwparam('groupid'), $callsign);
    }
    debug("    found: $person->[0]\n");
    return $person->[0];
}

########################################
# FCC Data
#
sub get_fcc_data {
    return if (!$dbh2);
    my $callsign = shift;
    $callsign = uc($callsign);
    my @signs;

    my $rows = get_many($hdh, $callsign);
#    print Dumper($rows);
    push @signs, $rows->[$#$rows][3] if ($#$rows != -1);
    $rows = get_many($vdh, $callsign);
#    print Dumper($rows);
    push @signs, $rows->[$#$rows][0] if ($#$rows != -1);

    return [] if ($#signs == -1);

    my $row = get_one($calldetails, $signs[$#signs]);
#    debug("grabbed: $callsign -> $row->[0]\n");
    return $row;
}


########################################
# GROUP
my $find_membership = $dbh->prepare("select groupid from members
                                      where groupperson = ?");
my $delete_membership = $dbh->prepare("delete from members where
                                       groupid = ? and groupperson = ?");
my $add_membership = $dbh->prepare("insert into members(groupid, groupperson)
                                                 values(?, ?)");

sub add_person_group {
  my ($groupid, $callsign) = @_;
  my $person = maybe_create_person($callsign);

  $delete_membership->execute($groupid, $person);
  $add_membership->execute($groupid, $person);

  debug("adding person gid=$groupid, call=$callsign\n");
}


########################################
# EVENT DETAILS
#
my $delete_details = $dbh->prepare("delete from eventmembers
                                    where eventid = ?
                                      and eventperson = ?");
my $make_details = $dbh->prepare("insert into eventmembers
      				   	  (eventid,
                                           eventperson,
                                           eventpersonlocation,
      				   	   eventpersondetails)
                                  select ?, ?, locationid, ? from locations
                                   where locationname = ?
                                     and locationperson = ?");

sub add_person_event {
  my ($eventid, $callsign, $eventpersonlocname,
      $eventpersondetails, $eventpersonlocation,
      $eventpersonlat, $eventpersonlon) = @_;
  return if (!$eventid || !$callsign);
  my $person = maybe_create_person($callsign);
  $delete_details->execute($eventid, $person);
  $make_details->execute($eventid, $person, 
			 $eventpersondetails || "",
			 $eventpersonlocname || "",
			 $person);
  debug("adding person eid=$eventid, call=$callsign\n");
}

########################################
# CONNECTIONS
my $find_connection = $dbh->prepare("select listener, heard,
                                            comment, rating from connections
                                      left join people as p1
                                        on p1.id = listener
                                      left join people as p2
                                        on p2.id = heard
                                     where eventid = ?
                                       and p1.callsign = ?
                                       and p2.callsign = ?");
my $make_connection = $dbh->prepare("insert into connections (eventid,
                                                              listener, heard,
                                                              comment, rating)
                                                 values(?,?,?,?,?)");
my $delete_connection = $dbh->prepare("delete from connections
                                        where eventid = ?
                                          and listener = ?
                                          and heard = ?");
sub make_connection {
    my ($eventid, $call1, $call2, $comment, $rating) = @_;
    my $person1 = maybe_create_person($call1, $eventid);
    my $person2 = maybe_create_person($call2, $eventid);
    delete_connection($eventid, $call1, $call2);
    $make_connection->execute($eventid, $person1, $person2,
			      $comment, $rating);
}

sub find_connection {
    my ($eventid, $call1, $call2) = @_;
    debug("finding connection: $call1, $call2\n");
    my $row = get_one($find_connection, $eventid, $call1, $call2);
    debug("finding connection: $row\n");
    return $row;
}

sub delete_connection {
    my ($eventid, $call1, $call2) = @_;
    my $person1 = maybe_create_person($call1);
    my $person2 = maybe_create_person($call2);
    $delete_connection->execute($eventid, $person1, $person2);
}


########################################
# MAIN

my $qw = new QWizard(primaries => \%primaries, title => "Simplex Mapper");
if (ref($qw->{'generator'}) !~ /HTML/) {
    $qw->{'generator'}{'prefstore'} =
      new QWizard::Storage::File(file => $ENV{'HOME'} . "/.simplexmaprc");
    $qw->{'generator'}{'prefstore'}->load_data();
} else {
    $qw->{'generator'}{'tmpdir'} = "tmp";
    $qw->{'generator'}{'imgpath'} = "tmp";
    $qw->{'generator'}{'datapath'} = "tmp/";
}
$qw->magic('pickgroup');

sub get_one_value_sql {
    my $sql = shift;
    my $sqlh = $dbh->prepare_cached($sql);
    return get_one_value($sqlh, @_);
}

